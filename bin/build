#!/usr/bin/env node
"use strict"

const sh = require('shelljs/global')
const babel = require('babel-core')
const handlebars = require('handlebars')
const requirejs = require('requirejs')
const uglify = require('uglify-js')
const path = require('path')

const BABEL_PLUGINS = {
  client: [
    "babel-plugin-transform-flow-strip-types",
    "babel-plugin-transform-es2015-modules-amd"
  ],

  server: [
    "babel-plugin-transform-flow-strip-types"
  ]
}

const BABEL_PRESETS = [
  "babel-preset-es2015",
  "babel-preset-stage-0"
]

const ENV = {dev: true}

function main(args) {
  let cmds = args.slice(2).filter((cmd) => {
    if (cmd == '--prod') {
      ENV.dev = false
      return false
    }

    if (cmd.startsWith('--plugins=')) {
      registerPlugins(cmd.replace('--plugins=', ''))
      return false
    }

    return true
  })

  if (cmds.length) {
    cmds.forEach((cmd) => {
      if (cmd.endsWith('.less')) {
        less('src/styles/charted.less', 'out/client/charted.css')
      }

      if (cmd.endsWith('.js')) {
        if (cmd.startsWith('client')) {
          transpile(`src/${cmd}`, 'client')
        }

        if (cmd.startsWith('server')) {
          transpile(`src/${cmd}`, 'server')
        }

        if (cmd.startsWith('shared')) {
          transpile(`src/${cmd}`, 'client')
          transpile(`src/${cmd}`, 'server')
        }
      }

      if (cmd.startsWith('public')) {
        let dest = cmd.replace('public/', '')
        cp('-rf', `src/${cmd}`, `out/client/${dest}`)
      }

      if (cmd.startsWith('templates') && cmd.endsWith('.html')) {
        template(`src/${cmd}`)
      }
    })

    return
  }

  // We're recompiling the whole project so we need
  // to delete the existing build.
  echo('Removing old build')
  rm('-r', 'out')

  echo('Creating necessary directories')
  mkdir('-p', 'out/server')
  mkdir('-p', 'out/shared')
  mkdir('-p', 'out/client/scripts')
  mkdir('-p', 'out/client/shared')
  mkdir('-p', 'out/client/lib')

  // Copy src/public and lib/client without any transformation.
  echo('Copying src/public and lib/client')
  cp('-r', 'src/public/*', 'out/client')
  cp('-r', 'lib/client/*', 'out/client/lib')

  // Compile LESS
  echo('Compiling LESS')
  less('src/styles/charted.less', 'out/client/charted.css')

  // Compile templates
  ls('-R', 'src/templates/*.html').forEach((file) => {
    echo(`Compiling ${file}`)
    template(file)
  })

  // Compile client-side JavaScript
  ls('-R', 'src/client/*.js').forEach((file) => {
    echo(`Compiling ${file}`)
    transpile(file, 'client')
  })

  // Compile server-side JavaScript
  ls('-R', 'src/server/*.js').forEach((file) => {
    echo(`Compiling ${file}`)
    transpile(file, 'server')
  })

  // Compile shared JavaScript
  ls('-R', 'src/shared/*.js').forEach((file) => {
    echo(`Compiling ${file}`)
    transpile(file, 'client')
    transpile(file, 'server', true)
  })

  // Compile JavaScript for production (if needed)
  if (!ENV.dev) {
    echo(`Optimizing JavaScript`)
    uglify.minify([
      'out/client/lib/d3.js',
      'out/client/lib/jquery.js'
    ]).code.to('out/client/lib.js')

    requirejs.optimize({
      baseUrl: 'out/client',
      name: 'scripts/charted',
      out: 'out/client/charted.js',
      include: 'requireLib',
      paths: {
        requireLib: 'lib/require'
      }
    })
  }
}

function less(src, dest) {
  exec(`lessc ${src} ${dest}`)
}

function transpile(file, type, isShared) {
  let name = file
    .replace('src/client/', 'scripts/')
    .replace('src/server/', '')
    .replace('src/', '')

  let code = cat(file)
  let dest = type == 'client' ? 'out/client' : isShared ? 'out' : 'out/server'
  let options = {
    filename: name,
    presets: BABEL_PRESETS,
    plugins: type == 'client' ? BABEL_PLUGINS.client : BABEL_PLUGINS.server
  }

  let res = babel.transform(code, options)
  res.code.to(`${dest}/${name}`)
}

function template(file) {
  let name = file.replace('src/templates/', '')
  let code = cat(file)
  let res = handlebars.compile(code)({ENV: ENV})
  res.to(`out/client/${name}`)
}

function registerPlugins(dir) {
  ls('-R', `${dir}/*.html`).forEach((file) => {
    let name = path.basename(file, '.html')
    handlebars.registerPartial(name, cat(file))
  })
}


// Get to the root of the project
while (!test('-f', 'package.json')) { cd('..') }
main(process.argv)
